// --------------------
// Prisma Configuration
// --------------------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --------------------
// Models
// --------------------

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String? // nullable for SSO or seeded users
  role      Role     @default(EMPLOYEE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ✅ Relation to Booking
  bookings Booking[] @relation("OrganizerBookings")
}

model MeetingRoom {
  id         String   @id @default(cuid())
  name       String   @unique
  capacity   Int
  equipment  String[] @default([])
  hourlyRate Float
  location   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // ✅ Relation to Booking
  bookings Booking[]
}

model Ticket {
  id        String   @id @default(uuid())
  title     String   @unique
  price     Float
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ✅ Relation to Booking
  bookings Booking[]

  @@index([title])
}

model Booking {
  id            String  @id @default(cuid())
  organizerId   String
  meetingRoomId String
  ticketId      String? // ✅ relational field to Ticket

  // ✅ Relations
  organizer   User        @relation("OrganizerBookings", fields: [organizerId], references: [id])
  meetingRoom MeetingRoom @relation(fields: [meetingRoomId], references: [id])
  ticket      Ticket?     @relation(fields: [ticketId], references: [id])

  attendeesCount    Int
  duration          Int
  requiredEquipment String[]
  preferredStart    DateTime
  flexibility       Int
  priority          Priority
  ticketTitle       String // ✅ still keeping title for display
  cost              Float?
  autoReleaseAt     DateTime?
  startTime         DateTime?
  endTime           DateTime?
  status            BookingStatus @default(SCHEDULED)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

// --------------------
// Enums
// --------------------

enum Role {
  EMPLOYEE
  ADMIN
  CEO
}

enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum BookingStatus {
  PENDING
  SCHEDULED
  CANCELLED
  RELEASED
  COMPLETED
  NO_SHOW
}
